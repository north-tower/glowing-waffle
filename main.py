from telethon import TelegramClient, events, Button
import os
from dotenv import load_dotenv
import asyncio
from datetime import datetime
from CurrencyPairs import CurrencyPairs
from demo_test import fetch_summary
from Visualizer   import  TradingChartPlotter
from Helpers import *
from Analysis import HistorySummary
import tempfile
    # Callback: Prompt for time selection
from functools import partial


class TelegramBotClient:
    def __init__(self):
        print("üîÑ [–ò–ù–§–û] –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env.")
        load_dotenv()
        self.currency_pairs = CurrencyPairs()

        self.api_id = "26422824"
        self.api_hash = "3c8f82c213fbd41b275b8b921d8ed946"
        self.bot_token ="8129679884:AAGEbC-P6_YFQFzERMiV2UevFx6uXAqSUhs"

        if not all([self.api_id, self.api_hash, self.bot_token]):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: API_ID, API_HASH –∏–ª–∏ BOT_TOKEN")

        self.client = None

    async def connect(self):
        try:
            print("üöÄ [–ò–ù–§–û] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –±–æ—Ç–∞.")
            self.client = TelegramClient('bot', self.api_id, self.api_hash)
            await self.client.start(bot_token=self.bot_token)
            print("‚úÖ [–ò–ù–§–û] –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram.")
        except Exception as e:
            print(f"‚ö†Ô∏è [–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")

    def generate_buttons(self, pairs, selected_asset):
        buttons = [
            [Button.inline(pair, f"pair:{pair}") for pair in pairs[i:i+2]]
            for i in range(0, len(pairs), 2)
        ]
        return buttons  # Removed the 'show_all' and 'show_less' logic


    async def start_bot(self):
        try:
            await self.connect()

            # Define the start command handler
            self.client.add_event_handler(self.handle_start_command, events.NewMessage(pattern='/start'))

            # Define the asset selection handler
            self.client.add_event_handler(self.handle_asset_selection, events.CallbackQuery)

            await self.client.run_until_disconnected()

        except Exception as e:
            print(f"‚ö†Ô∏è [–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")


    # Callback: Handle the '/start' command
    async def handle_start_command(self, event):
        await self.show_main_menu(event)


    # Callback: Handle asset selection
    async def handle_asset_selection(self, event):
        selected_asset = event.data.decode('utf-8')

        if selected_asset in ["otc", "regular_assets"]:
            # Always show all pairs by default
            await self.display_currency_pairs(event, selected_asset)
        elif selected_asset.startswith("pair:"):
            selected_pair = selected_asset.split(":")[1]
            await self.prompt_for_time(event, selected_pair)


    # Method: Display currency pairs
    async def display_currency_pairs(self, event, asset_type):
        pairs = await self.currency_pairs.fetch_pairs(asset_type)
        buttons = self.generate_buttons(pairs, asset_type)

        await event.edit(
            f"üîÆüíπ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:* üíπüîÆ",
            buttons=buttons
        )

    # Callback: Prompt for time selection
    async def prompt_for_time(self, event, selected_pair):
        try:
            await event.respond(
                f"üí° *–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–∞–≥–∏–∏!* üîÆ\n\n‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_pair}\n\n‚è≥‚ú® *–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è:* ‚ú®‚è≥",
                buttons=[
                    [Button.inline("1Ô∏è‚É£ 1 –º–∏–Ω—É—Ç–∞ üïê", b"1")],
                    [Button.inline("3Ô∏è‚É£ 3 –º–∏–Ω—É—Ç—ã üïí", b"3")],
                    [Button.inline("5Ô∏è‚É£ 5 –º–∏–Ω—É—Ç üïî", b"5")],
                    [Button.inline("1Ô∏è‚É£5Ô∏è‚É£ 15 –º–∏–Ω—É—Ç üïò", b"15")]
                ]
            )

            # Define a closure for the callback
            async def handle_time_input(response):
                if response.data.decode('utf-8') in ["1", "3", "5", "15"]:
                    # Remove the handler immediately to avoid conflicts
                    self.client.remove_event_handler(handle_time_input, events.CallbackQuery)
                    await self._handle_time_input(response, selected_pair)
                else:
                    await response.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏.", alert=True)

            # Add the handler with specific data to scope its action
            self.client.add_event_handler(
                handle_time_input,
                events.CallbackQuery(func=lambda e: e.sender_id == event.sender_id)
            )

        except Exception as e:
            print(f"‚ö†Ô∏è [–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")

    # Helper method: Handle time input
    async def _handle_time_input(self, response, selected_pair):
        try:
            time_choice = int(response.data.decode('utf-8'))
            print(f"‚úÖ [–ò–ù–§–û] –í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ: {time_choice} –º–∏–Ω—É—Ç –¥–ª—è –ø–∞—Ä—ã {selected_pair}")

            # Process the selection
            await self.process_selection(response, selected_pair, time_choice)

        except ValueError as ve:
            print(f"‚ö†Ô∏è [–û–®–ò–ë–ö–ê] –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏: {ve}")
        except Exception as e:
            print(f"‚ö†Ô∏è [–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞: {e}")

    async def process_selection(self, response, selected_pair, time_choice):
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è.
        """
        try:
            # Update time mapping to match the `time_choice` values
            time_mapping = {
                1: "1 –º–∏–Ω—É—Ç–∞",
                3: "3 –º–∏–Ω—É—Ç—ã",
                5: "5 –º–∏–Ω—É—Ç",
                15: "15 –º–∏–Ω—É—Ç"
            }

            # Clean up the currency pair
            cleaned_pair = remove_country_flags(selected_pair)
            asset = "_".join(cleaned_pair.replace("/", "").split())

            # Replace "OTC" with "_otc" if present
            if asset.endswith("OTC"):
                asset = asset[:-3] + "_otc"

            period = time_choice
            token ="_p_9FptVKA"

            # Notify the user about the process
            await response.respond(
                f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {selected_pair} —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è {time_mapping[time_choice]}...\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –º—ã –ø–æ–ª—É—á–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."
            )

            # Call fetch_summary with error handling
            results, history_data = await self.fetch_summary_with_handling(asset, period, token)

            if results and history_data:
                # Format results (optional)
                # summary = format_summary(results['Summary'])
                # indicators = format_indicators(results['Indicators'])
                history_summary = HistorySummary(history_data, time_choice)
                signal_info = history_summary.generate_signal(selected_pair, time_choice)

                # Generate the chart
                chart_plotter = TradingChartPlotter(history_data, selected_pair, time_mapping[time_choice])
                chart_image = chart_plotter.plot_trading_chart()

                if chart_image:
                    # Save the image as a temporary PNG file
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as temp_file:
                        temp_file_path = temp_file.name
                        temp_file.write(chart_image.read())  # Write the BytesIO content to the temporary file

                    # Send the chart image as a photo (inline image)
                    await self.client.send_file(
                        response.sender_id,
                        temp_file_path,  # Sending the temporary PNG file
                        
                        force_document=False  # Tells Telethon to send it as a photo
                    )
                    await response.respond(
                        f"{signal_info}"
                    )

                    # Clean up the temporary file after sending
                    os.remove(temp_file_path)
                else:
                    await response.respond(
                        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫, –Ω–æ –Ω–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã —Ä–µ–∑—é–º–µ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã."
                    )
                    await response.respond(
                        f"üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_pair} —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è {time_mapping[time_choice]}!\n\n"
                        f"{signal_info}"
                    )

            else:
                await response.respond(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {asset} —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è."
                )

        except Exception as e:
            print(f"‚ö†Ô∏è [–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞: {e}")
        # Show the main menu after processing
        await self.show_main_menu(response)
   

    async def show_main_menu(self, event):
        print(f"üì≤ [–ò–ù–§–û] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}")
        await event.respond(
            "‚ú®üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ \"–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–π–¥–µ—Ä\"! üîÆ‚ú®\n"
            "üßô‚Äç‚ôÇÔ∏è –ó–¥–µ—Å—å –≤—ã –æ—Ç–∫—Ä–æ–µ—Ç–µ –¥–ª—è —Å–µ–±—è –º–∞–≥–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏ —Ä—ã–Ω–∫–∞. üìàüìâ\n\n"
            "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –≠—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ª–µ–≥–∫–∏—Ö –¥–µ–Ω–µ–≥! –ü–æ–º–Ω–∏—Ç–µ –æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ üí∞ –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ üìä.\n\n"
            "üí° –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ:\n"
            "1Ô∏è‚É£ OTC-–∞–∫—Ç–∏–≤—ã\n"
            "2Ô∏è‚É£ –û–±—ã—á–Ω—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã",
            buttons=[
                [Button.inline("1Ô∏è‚É£ OTC-–∞–∫—Ç–∏–≤—ã üîÑ (–¥–æ—Å—Ç—É–ø–Ω—ã 24/7)", b"otc")],
                [Button.inline("2Ô∏è‚É£ –û–±—ã—á–Ω—ã–µ –∞–∫—Ç–∏–≤—ã üåê (–≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Ä—ã–Ω–∫–æ–≤)", b"regular_assets")]
            ]
        )


    async def fetch_summary_with_handling(self, asset, period, token):
        """
        –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è fetch_summary –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WebSocket.
        """
        try:
            results, history_data = await fetch_summary(asset, period, token)

            if results:
                return results, history_data
            else:
                print("‚ö†Ô∏è [–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞.")
                return None, None

        except Exception as e:
            print(f"‚ö†Ô∏è [–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –≤ fetch_summary_with_handling: {e}")
            return None, None


if __name__ == "__main__":
    bot_client = TelegramBotClient()
    asyncio.run(bot_client.start_bot())



# from telethon import TelegramClient, events, Button
# import os
# from dotenv import load_dotenv
# import asyncio
# from datetime import datetime
# from CurrencyPairs import CurrencyPairs
# from demo_test import fetch_summary
# from Helpers import *

# class TelegramBotClient:
#     def __init__(self):
#         print("üîÑ [INFO] Loading environment variables from .env file.")
#         load_dotenv()
#         self.currency_pairs = CurrencyPairs()

#         self.api_id = os.getenv('API_ID')
#         self.api_hash = os.getenv('API_HASH')
#         self.bot_token = os.getenv('BOT_TOKEN')

#         if not all([self.api_id, self.api_hash, self.bot_token]):
#             raise ValueError("Missing environment variables: API_ID, API_HASH, or BOT_TOKEN")

#         self.client = None

#     async def connect(self):
#         try:
#             print("üöÄ [INFO] Initializing Telegram Client for the bot.")
#             self.client = TelegramClient('bot', self.api_id, self.api_hash)
#             await self.client.start(bot_token=self.bot_token)
#             print("‚úÖ [INFO] Successfully connected to Telegram.")
#         except Exception as e:
#             print(f"‚ö†Ô∏è [ERROR] Failed to connect: {e}")

#     def generate_buttons(self, pairs, show_all, selected_asset):
#         buttons = [
#             [Button.inline(pair, f"pair:{pair}") for pair in pairs[i:i+2]]
#             for i in range(0, len(pairs), 2)
#         ]
#         if show_all:
#             buttons.append([Button.inline("See All", f"show_all:{selected_asset}")])
#         else:
#             buttons.append([Button.inline("See Less", f"show_less:{selected_asset}")])
#         return buttons

#     async def start_bot(self):
#         try:
#             await self.connect()

#             @self.client.on(events.NewMessage(pattern='/start'))
#             async def start_command(event):
#                 await self.show_main_menu(event)

#             @self.client.on(events.CallbackQuery)
#             async def asset_selection(event):
#                 selected_asset = event.data.decode('utf-8')

#                 if selected_asset in ["otc", "regular_assets"]:
#                     pairs = await self.currency_pairs.fetch_pairs(selected_asset)
#                     visible_pairs = pairs[:6]
#                     show_all = len(pairs) > 6

#                     buttons = self.generate_buttons(visible_pairs, show_all, selected_asset)

#                     await event.edit(
#                         f"Here are the {selected_asset.replace('_', ' ').capitalize()} Currency Pairs:",
#                         buttons=buttons
#                     )
#                 elif selected_asset.startswith("pair:"):
#                     selected_pair = selected_asset.split(":")[1]
#                     await self.prompt_for_time(event, selected_pair)
#                 elif selected_asset.startswith("show_all:"):
#                     asset_type = selected_asset.split(":")[1]
#                     pairs = await self.currency_pairs.fetch_pairs(asset_type)
#                     buttons = self.generate_buttons(pairs, False, asset_type)

#                     await event.edit(
#                         f"Here are all the {asset_type.replace('_', ' ').capitalize()} Currency Pairs:",
#                         buttons=buttons
#                     )
#                 elif selected_asset.startswith("show_less:"):
#                     asset_type = selected_asset.split(":")[1]
#                     pairs = await self.currency_pairs.fetch_pairs(asset_type)
#                     visible_pairs = pairs[:6]
#                     buttons = self.generate_buttons(visible_pairs, True, asset_type)

#                     await event.edit(
#                         f"Here are the {asset_type.replace('_', ' ').capitalize()} Currency Pairs:",
#                         buttons=buttons
#                     )
#                 else:
#                     await event.respond("‚ö†Ô∏è Invalid option selected.")

#             await self.client.run_until_disconnected()

#         except Exception as e:
#             print(f"‚ö†Ô∏è [ERROR] Failed to start bot: {e}")

#     async def prompt_for_time(self, event, selected_pair):
#         try:
#             await event.respond(
#                 f"‚úÖ You selected: {selected_pair}\n\n‚è≥ Select expiration time:\n1Ô∏è‚É£ 1 minute\n2Ô∏è‚É£ 3 minutes\n3Ô∏è‚É£ 5 minutes\n4Ô∏è‚É£ 15 minutes"
#             )

#             @self.client.on(events.NewMessage(from_users=event.sender_id))
#             async def handle_time_input(response):
#                 try:
#                     time_choice = int(response.text)
#                     if time_choice not in [1, 2, 3, 4]:
#                         raise ValueError

#                     self.client.remove_event_handler(handle_time_input)

#                     # Pass selected pair and time to a separate function
#                     await self.process_selection(response, selected_pair, time_choice)

#                 except ValueError:
#                     await response.respond("‚ùå Invalid input. Please enter a number between 1 and 4.")
#                 except Exception as e:
#                     print(f"‚ö†Ô∏è [ERROR] Error in handle_time_input: {e}")

#         except Exception as e:
#             print(f"‚ö†Ô∏è [ERROR] Error in prompting for time: {e}")

#     async def process_selection(self, response, selected_pair, time_choice):
#         """
#         Process the selected currency pair and expiration time.
#         """
#         try:
#             time_mapping = {
#                 1: "1 minute",
#                 2: "3 minutes",
#                 3: "5 minutes",
#                 4: "15 minutes"
#             }

#             # Clean the currency pair (remove emojis, '/', spaces, and replace with '_')
#             cleaned_pair = remove_country_flags(selected_pair)
#             asset = "_".join(cleaned_pair.replace("/", "").split())

#             # Replace trailing "OTC" with "_otc" if it exists
#             if asset.endswith("OTC"):
#                 asset = asset[:-3] + "_otc"  # Remove "OTC" and append "_otc"

#             period = time_choice  # Use the selected time directly as period
#             token = "cZoCQNWriz"  # Replace with the actual token

#             # Inform the user that their request is being processed
#             await response.respond(
#                 f"‚è≥ Processing your request for {selected_pair} with an expiration time of {time_mapping[time_choice]}...\n"
#                 "Please wait while we fetch the results."
#             )

#             # Call fetch_summary with proper async handling
#             results = await self.fetch_summary_with_handling(asset, period, token)

#             # Respond with the final selection and results
#             if results:
#                 summary = format_summary(results['Summary'])
#                 indicators = format_indicators(results['Indicators'])

#                 await response.respond(
#                     f"üéâ You chose {selected_pair} with an expiration time of {time_mapping[time_choice]}!\n\n"
#                     f"{summary}\n\n{indicators}"
#                 )
#             else:
#                 await response.respond(
#                     f"‚ö†Ô∏è No results were returned for {asset} with the selected time."
#                 )

#         except Exception as e:
#             print(f"‚ö†Ô∏è [ERROR] Error in process_selection: {e}")
#         # Show main menu after processing
#         await self.show_main_menu(response)

#     async def show_main_menu(self, event):
#         print(f"üì≤ [INFO] Showing main menu to user {event.sender_id}")
#         await event.respond(
#             "üéâ Welcome to the Pocket Option Trading Bot!\n\nüíπ Let‚Äôs start by selecting the type of assets.",
#             buttons=[
#                 [Button.inline("üîπ OTC", b"otc")],
#                 [Button.inline("üîπ Regular Assets", b"regular_assets")]
#             ]
#         )
#     async def fetch_summary_with_handling(self, asset, period, token):
#         """
#         Wrapper for fetch_summary to ensure proper handling for websockets.
#         """
#         try:
#             results = await fetch_summary(asset, period, token)

#             # Add logic to validate the results or reattempt fetching if needed
#             if results:
#                 return results
#             else:
#                 print("‚ö†Ô∏è [WARNING] No results fetched. Reattempting may be required.")
#                 return None

#         except Exception as e:
#             print(f"‚ö†Ô∏è [ERROR] Error in fetch_summary_with_handling: {e}")
#             return None

# if __name__ == "__main__":
#     bot_client = TelegramBotClient()
#     asyncio.run(bot_client.start_bot())

